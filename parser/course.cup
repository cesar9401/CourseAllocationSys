package com.cesar31.system.parser;

import com.cesar31.system.control.*;
import com.cesar31.system.model.*;
import com.cesar31.system.structures.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

class CourseParser;

parser code {:

	private Structure edd;

	public CourseParser(CourseLex lex, Structure edd) {
		super(lex);
		this.edd = edd;
	}

	public void syntax_error(Symbol cur_token) {
		// this.cur_token = cur_token;
		List<String> expected = new ArrayList<>();
		List<Integer> tokens = expected_token_ids();

		System.out.printf("Se encontro: %s -> (%s), linea %d columna %d, se esperaba -> ", cur_token.value, symbl_name_from_id(cur_token.sym), cur_token.left, cur_token.right);
		for(Integer i : tokens) {
			// expected.add(symbl_name_from_id(i));
			System.out.printf("%s, ", symbl_name_from_id(i));
		}
		System.out.println("");
	}
:}

terminal STUDENT, USER, COLLABORATOR, STUDENT_, BUILDING, CLASSROOM, PROFESSOR, COURSE, SCHEDULE, ASSIGNMENT;
terminal INTEGER, LPAREN, RPAREN, SEMI, COMMA, INPUT, DAY, INTERVAL, STR, ERROR;

non terminal Student student;
non terminal User user;
non terminal Building building;
non terminal Classroom classroom;
non terminal Professor professor;
non terminal Course course;
non terminal Schedule schedule;
non terminal Assignment assignment;
non terminal Boolean type;

non terminal HashTable<Student> make_student;
non terminal DoublyLinkdList<User> make_user;
non terminal DoublyLinkdList<Building> make_building;
non terminal AVLTree<Professor> make_professor;
non terminal DoublyLinkdList<Course> make_course;
non terminal BTree<Schedule> make_schedule;
non terminal DoublyLinkdList<Assignment> make_assignment;
non terminal Boolean first;

non terminal str, make_classroom;

first ::=
				make_student:students
					{: edd.setStudents(students); :}
				make_user:users
					// {: edd.setUsers(users); :}
				make_building:buildings
					{: edd.setBuildings(buildings); :}
				make_classroom
				make_professor:avl
					{: edd.setProfessors(avl); :}
				make_course:courses
					{: edd.setCourses(courses); :}
				make_schedule:bTree
					{: edd.setSchedules(bTree); :}
				make_assignment:assig
					// {: edd.setAssignments(assig); :}
					{: RESULT = true; :}
				;

make_student ::=
				make_student:table student:s1
					{:
						table.put(s1.getId(), s1);
						RESULT = table;
					:}
				| student:s1
					{:
						RESULT = new HashTable<>();
						RESULT.put(s1.getId(), s1);
					:}
				;

student ::=
				STUDENT LPAREN INTEGER:d1 COMMA str:d2 COMMA str:d3 RPAREN SEMI
					{:
						RESULT = new Student(d1.toString(), d2.toString(), d3.toString());
						//System.out.println(RESULT);
					:}
				;

make_user ::=
				make_user:list user:u1
					{:
						if(u1 != null) {
							edd.getUsers().insert(u1.getId(), u1);
							// list.insert(u1.getId(), u1);
						}
						RESULT = list;
					:}
				| user:u1
					{:
						// RESULT = new DoublyLinkdList<>();
						if(u1 != null) {
							edd.getUsers().insert(u1.getId(), u1);
							// RESULT.insert(u1.getId(), u1);
						}
					:}
				;

user ::=
				USER LPAREN INTEGER:d1 COMMA str:d2 COMMA str:d3 COMMA type:isStudent RPAREN SEMI
					{:
						UserType ut = isStudent ? UserType.STUDENT : UserType.COLLABORATOR;
						User tmp = new User(d1.toString(), d2.toString(), d3.toString(), ut);

						if(isStudent) {
							Student s = edd.getStudents().get(d1.toString());
							if(s != null) {
								RESULT = tmp;
							} else {
								System.out.println("No se puede agregar al usuario(no existe estudiante): " + tmp);
							}
						} else {
							RESULT = tmp;
						}
					:}
				;

make_building ::=
				make_building:list building:b1
					{:
						list.insert(b1.getName(), b1);
						RESULT = list;
					:}
				| building:b1
					{:
						RESULT = new DoublyLinkdList<>();
						RESULT.insert(b1.getName(), b1);
					:}
				;

building ::=
				BUILDING LPAREN str:d1 RPAREN SEMI
					{:
						RESULT = new Building(d1.toString());
						//System.out.println(RESULT);
					:}
				;

make_classroom ::=
				make_classroom classroom
				| classroom
				;

classroom ::=
				CLASSROOM LPAREN str:d1 COMMA INTEGER:d2 COMMA INTEGER:d3 RPAREN SEMI
					{:
						Classroom tmp = new Classroom(d2.toString(), Integer.valueOf(d3.toString()));
						ListNode<Building> b = edd.getBuildings().getNode(d1.toString());
						if(b != null) {
							tmp.setBuilding(b.getData());
							b.getData().getClassrooms().insert(tmp.getId(), tmp);
						} else {
							System.out.println("El edificio " + d1.toString() + ", no existe, no se puede agregar el salon: " + tmp.getId());
						}
					:}
				;

make_professor ::=
				make_professor:avl professor:p1
					{:
						avl.insert(p1.getId(), p1);
						RESULT = avl;
					:}
				| professor:p1
					{:
						RESULT = new AVLTree<>();
						RESULT.insert(p1.getId(), p1);
					:}
				;

professor ::=
				PROFESSOR LPAREN INTEGER:d1 COMMA str:d2 COMMA str:d3 RPAREN SEMI
					{:
						RESULT = new Professor(d1.toString(), d2.toString(), d3.toString());
						//System.out.println(RESULT);
					:}
				;

make_course ::=
				make_course:list course:c1
					{:
						list.insert(c1.getId(), c1);
						RESULT = list;
					:}
				| course:c1
					{:
						RESULT = new DoublyLinkdList<>();
						RESULT.insert(c1.getId(), c1);
					:}
				;

course ::=
				COURSE LPAREN INTEGER:d1 COMMA str:d2 COMMA INTEGER:d3 COMMA INTEGER:d4 RPAREN SEMI
					{:
						RESULT = new Course(d1.toString(), d2.toString(), Integer.valueOf(d3.toString()), Integer.valueOf(d4.toString()));
						//System.out.println(RESULT);
					:}
				;

make_schedule ::=
				make_schedule:bTree schedule:s1
					{:
						if(s1 != null) {
							bTree.insert(new Sortable(s1.getId()), s1);
						}
						RESULT = bTree;
					:}
				| schedule:s1
					{:
						RESULT = new BTree<>(Schedule.class);
						if(s1 != null) {
							RESULT.insert(new Sortable(s1.getId()), s1);
						}
					:}
				;

schedule ::=
				SCHEDULE LPAREN INTEGER:d1 COMMA INTERVAL:d2 COMMA DAY:d3 COMMA INTEGER:d4 COMMA INTEGER:d5 COMMA INPUT:d6 COMMA INTEGER:d7 RPAREN SEMI
					{:
						// Crear horarios
						Schedule tmp = new Schedule(d1.toString(), d2.toString(), d3.toString());
						boolean create = true;

						// Curso
						if(edd.getCourses().getNode(d4.toString()) != null) {
							Course c = edd.getCourses().getNode(d4.toString()).getData();
							tmp.setCourse(c);
						} else {
							create = false;
						}

						// Edificio y salon
						if(edd.getBuildings().getNode(d6.toString()) != null) {
							Building b = edd.getBuildings().getNode(d6.toString()).getData();
							if(b.getClassrooms().getNode(d5.toString()) != null) {
								Classroom c = b.getClassrooms().getNode(d5.toString()).getData();
								tmp.setBuilding(b);
								tmp.setClassroom(c);
							} else {
								create = false;
							}
						} else {
							create = false;
						}

						// Docente
						if(edd.getProfessors().get(d7.toString()) != null) {
							Professor p = edd.getProfessors().get(d7.toString()).getData();
							tmp.setProfessor(p);
						} else {
							create = false;
						}

						// Resultado
						if(create) {
							RESULT = tmp;
						} else {
							System.out.println("No es posible crear horario: " + tmp.getId());
						}
					:}
				;

make_assignment ::=
				make_assignment:list assignment:a1
					// {:
					// 	if(a1 != null) {
					// 		list.insert(a1.getId(), a1);
					// 	}
					// 	RESULT = list;
					// :}
				| assignment:a1
					// {:
					// 	RESULT = new DoublyLinkdList<>();
					// 	if(a1 != null) {
					// 		RESULT.insert(a1.getId(), a1);
					// 	}
					// :}
				;

assignment ::=
				ASSIGNMENT LPAREN INTEGER:d1 COMMA INTEGER:d2 COMMA INTEGER:d3 COMMA INTEGER:d4 RPAREN SEMI
					{:
						Assignment tmp = new Assignment();
						tmp.setHomeworkScore(Integer.valueOf(d3.toString()));
						tmp.setTestScore(Integer.valueOf(d4.toString()));
						boolean create = true;

						// Estudiante
						Student e = edd.getStudents().get(d1.toString());
						if(e != null) {
							tmp.setStudent(e);
						} else {
							create = false;
						}

						// Horario
						Schedule s = edd.getSchedules().get(new Sortable(d2.toString()));
						if(s != null) {
							int actual = s.getAssignments().getSize();
							int limit = s.getClassroom().getNumberOfStudents();

							if(actual < limit) {
								tmp.setSchedule(s);
								tmp.setId(d1.toString()/*.concat(d2.toString())*/);
								s.getAssignments().insert(tmp.getId(), tmp);
								//System.out.println("Insertando asignacion: " + tmp.getId());
							} else {
								System.out.println("Limite de asignacion alcanzado");
							}
						} else {
							System.out.println("No se puede crear asignacion para: " + d1.toString() + ", en horario: " + d2.toString());
						}
					:}
				;

str ::=
				STR:s {: RESULT = s; :}
				| DAY:s {: RESULT = s; :}
				| INTERVAL:s {: RESULT = s; :}
				;

type ::=
				STUDENT_ {: RESULT = true; :}
				| COLLABORATOR {: RESULT = false; :}
				;
